import json
import sqlite3
from typing import Union, Dict, List
from datetime import datetime, date

def query_to_json(query: str, connection_string: str) -> str:
    """
    Execute SQL query and return results as JSON string.
    
    Args:
        query (str): SQL query to execute
        connection_string (str): Database connection string
        
    Returns:
        str: JSON string containing query results
        
    Raises:
        Exception: If there's an error in database connection or query execution
    """
    try:
        # Establish database connection
        conn = sqlite3.connect(connection_string)
        cursor = conn.cursor()
        
        # Execute query
        cursor.execute(query)
        
        # Get column names from cursor description
        columns = [description[0] for description in cursor.description]
        
        # Custom JSON encoder to handle datetime and date objects
        class DateTimeEncoder(json.JSONEncoder):
            def default(self, obj):
                if isinstance(obj, (datetime, date)):
                    return obj.isoformat()
                return super().default(obj)
        
        # Convert results to list of dictionaries
        results = []
        for row in cursor.fetchall():
            row_dict = {}
            for i, column in enumerate(columns):
                row_dict[column] = row[i]
            results.append(row_dict)
            
        # Close database connection
        cursor.close()
        conn.close()
        
        # Convert to JSON string with datetime handling
        return json.dumps(results, cls=DateTimeEncoder, indent=2)
        
    except Exception as e:
        raise Exception(f"Error executing query: {str(e)}")
